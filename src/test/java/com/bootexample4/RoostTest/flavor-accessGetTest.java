// Test generated by RoostGPT for test rest-assured-shakul using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /v2.1/flavors/10/flavor-access_get for http method type GET in rest-assured framework

// RoostTestHash=83e47da257

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class flavor-accessGetTest {
  
    @Test  
    public void flavor_access_get_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/bootexample4/RoostTest/flavor-access_get.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  
  
                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  
                
                // Extract the flavorId from the map for use in the endpoint
                String flavorId = map.get("flavorId");
                
                // Perform GET request and validate the response
                given()
                    .contentType(ContentType.JSON)
                .when()
                    .get("/v2.1/flavors/" + flavorId + "/flavor-access")
                .then()
                    .statusCode(anyOf(is(200), is(400), is(404), is(422)))
                    .body("not(empty)", whenResponseIs200())
                    .body("error", not(empty()), whenResponseIs400())
                    .body("message", equalTo("Not Found"), whenResponseIs404())
                    .body("errors", hasKey("unprocessable_entity"), whenResponseIs422());
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }

    // Helper method for conditional checks
    private ResponseAwareMatcher<Response> whenResponseIs200() {
        return response -> response.statusCode() == 200 ? anything() : null;
    }

    private ResponseAwareMatcher<Response> whenResponseIs400() {
        return response -> response.statusCode() == 400 ? anything() : null;
    }

    private ResponseAwareMatcher<Response> whenResponseIs404() {
        return response -> response.statusCode() == 404 ? anything() : null;
    }

    private ResponseAwareMatcher<Response> whenResponseIs422() {
        return response -> response.statusCode() == 422 ? anything() : null;
    }
}
