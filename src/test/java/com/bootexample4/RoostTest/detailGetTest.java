// Test generated by RoostGPT for test rest-assured-shakul using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /v2.1/flavors/detail_get for http method type GET in rest-assured framework

// RoostTestHash=81936109ec

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.Before;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class DetailGetTest {

    private static final String CSV_FILE_PATH = "src/test/java/com/bootexample4/RoostTest/detail_get.csv";
    private static final String ENDPOINT = "/v2.1/flavors/detail";

    @Before
    public void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void detail_get_Test() {
        // Read CSV file
        try (BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE_PATH))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                // Create a map of header to data
                Map<String, String> queryParameters = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    queryParameters.put(headers[i], data[i]);
                }

                // Prepare request with query parameters
                RequestSpecification request = given().queryParams(queryParameters);

                // Perform GET request and validate the response
                request.when()
                        .get(ENDPOINT)
                        .then()
                        .statusCode(anyOf(is(200), is(400), is(404), is(422)))
                        .contentType(ContentType.JSON)
                        .body("status", anyOf(equalTo("success"), equalTo("error")))
                        .body(conditionalBodyCheck(queryParameters));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private ResponseBodyCondition conditionalBodyCheck(Map<String, String> queryParameters) {
        return response -> {
            int statusCode = response.extract().statusCode();
            switch (statusCode) {
                case 200:
                    // Validate success response structure
                    response.body("data", notNullValue());
                    break;
                case 400:
                    // Validate bad request response structure
                    validateErrorResponse(response);
                    break;
                case 404:
                    // Validate not found response structure
                    validateNotFoundResponse(response);
                    break;
                case 422:
                    // Validate unprocessable entity response structure
                    validateUnprocessableEntityResponse(response);
                    break;
            }
        };
    }

    private void validateErrorResponse(Response response) {
        response.body("error", notNullValue());
        response.body("error.message", containsString("Bad Request"));
    }

    private void validateNotFoundResponse(Response response) {
        response.body("error", notNullValue());
        response.body("error.message", containsString("Not Found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        response.body("error", notNullValue());
        response.body("error.message", containsString("Unprocessable Entity"));
    }

    // Custom functional interface to allow conditional checks on the response body
    @FunctionalInterface
    interface ResponseBodyCondition {
        void apply(Response response);
    }
}
