// Test generated by RoostGPT for test rest-assured-shakul using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /nobelPrizes_get for http method type GET in rest-assured framework

// RoostTestHash=4940f5c55b

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.List;

@RunWith(SpringJUnit4ClassRunner.class)
public class NobelPrizesGetTest {

    @BeforeClass
    public static void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void nobelPrizesGetTest() {
        // This method should now utilize a data provider that feeds test data into this test method
        String offset = "0";
        String limit = "10";
        String sort = "desc";
        String nobelPrizeYear = "2021";
        String yearTo = "2021";
        String nobelPrizeCategory = "pea";
        String format = "json";
        String csvLang = "en";
  
        Response response = given()
            .queryParam("offset", offset)
            .queryParam("limit", limit)
            .queryParam("sort", sort)
            .queryParam("nobelPrizeYear", nobelPrizeYear)
            .queryParam("yearTo", yearTo)
            .queryParam("nobelPrizeCategory", nobelPrizeCategory)
            .queryParam("format", format)
            .queryParam("csvLang", csvLang)
            .when().get("/nobelPrizes")
            .then().extract().response();

        int statusCode = response.statusCode();
    
        switch (statusCode) {
            case 200:
                validateSuccessResponse(response);
                break;
            case 400:
                validateErrorResponse(response, "BadRequest");
                break;
            case 404:
                validateErrorResponse(response, "NotFound");
                break;
            case 422:
                validateErrorResponse(response, "UnprocessableEntity");
                break;
            default:
                throw new IllegalStateException("Unexpected response status: " + statusCode);
        }
    }

    private void validateSuccessResponse(Response response) {
        assertThat(response.jsonPath().getList("nobelPrizes"), is(instanceOf(List.class)));
        // Add more assertions based on the given API spec
    }

    private void validateErrorResponse(Response response, String errorType) {
        assertThat(response.jsonPath().getString("code"), is(notNullValue()));
        assertThat(response.jsonPath().getString("message"), is(notNullValue()));
        // Add specific assertions based on the response structure for the corresponding statuses
    }
}

