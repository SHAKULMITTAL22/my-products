// Test generated by RoostGPT for test rest-assured-metric using AI Type Open AI and AI Model gpt-4


// Test generated for /v2.0/metering/metering-label-rules/{metering-label-rule-id}_delete for http method type DELETE in rest-assured framework


// RoostTestHash=6da8381989


package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class MeteringLabelRulesMeteringLabelRuleIdDeleteTest {

    @Test
    public void meteringLabelRulesMeteringLabelRuleIdDeleteTest() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        // Read CSV file
        try(BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/bootexample4/RoostTest/metering-label-rules_metering-label-rule-id_delete.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                // Create a map of header to data
                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                                    .contentType(ContentType.JSON)
                                    .pathParam("metering-label-rule-id", map.get("metering-label-rule-id"))
                                    .when()
                                    .delete("/v2.0/metering/metering-label-rules/{metering-label-rule-id}")
                                    .then()
                                    .extract().response();

                // Validate status code
                assertEquals(204, response.statusCode(), "Status code does not match");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
