// Test generated by RoostGPT for test rest-assured-metric using AI Type Open AI and AI Model gpt-4

// Test generated for /v2.0/metering/metering-labels/{metering_label_id}_get for http method type GET in rest-assured framework

// RoostTestHash=a7069bdb0c

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

public class metering-labels_metering_label_idGetTest {

    @Test
    public void metering_labels_metering_label_id_get_Test() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        // Read CSV file
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/bootexample4/RoostTest/metering-labels_metering_label_id_get.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                // Create a map of header to data
                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                                    .pathParam("metering_label_id", map.get("metering_label_id"))
                                    .when()
                                    .get("/v2.0/metering/metering-labels/{metering_label_id}")
                                    .then()
                                    .contentType(ContentType.JSON)
                                    .extract().response();

                // Validate status code and response
                int statusCode = response.getStatusCode();
                switch (statusCode) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        System.out.println("Unexpected status code: " + statusCode);
                        break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateSuccessResponse(Response response) {
        response.then().body("id", equalTo(map.get("metering_label_id")));
        System.out.println("Description: 200 response");
    }

    private void validateErrorResponse(Response response) {
        response.then().body("error", notNullValue());
        System.out.println("Description: 400 response");
    }

    private void validateNotFoundResponse(Response response) {
        response.then().body("message", equalTo("Resource not found"));
        System.out.println("Description: 404 response");
    }

    private void validateUnprocessableEntityResponse(Response response) {
        response.then().body("error", equalTo("Unprocessable entity"));
        System.out.println("Description: 422 response");
    }
}
