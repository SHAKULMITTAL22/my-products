// Test generated by RoostGPT for test rest-assured-metric using AI Type Open AI and AI Model gpt-4


// Test generated for /v2.0/metering/metering-labels_get for http method type GET in rest-assured framework


// RoostTestHash=3dcb871c88


package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

public class metering-labelsGetTest {

    @Before
    public void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void meteringLabelsGetTest() {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/bootexample4/RoostTest/metering-labels_get.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                given()
                    .contentType("application/json")
                    .when()
                    .get("/v2.0/metering/metering-labels")
                    .then()
                    .assertThat()
                    .statusCode(200)
                    .contentType("application/json")
                    .body("message", equalTo("Success"))
                    .body("data", equalTo(map));

            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
