// Test generated by RoostGPT for test rest-assured-shakul using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /v2.1/flavors/1_get for http method type GET in rest-assured framework

// RoostTestHash=59bac22772

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GetTest {

    @BeforeClass
    public static void setup() {
        // Set the base URI before the tests are run
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void getTest() {
        // Read CSV file
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/bootexample4/RoostTest/get.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                // Create a map of header to data
                Map<String, String> params = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    params.put(headers[i], data[i]);
                }

                // Extract the endpoint and other parameters if needed
                String endpoint = params.get("endpoint");

                // Perform the API request and validate the response
                Response response = given()
                        .contentType(ContentType.JSON)
                        .params(params)
                        .when()
                        .get(endpoint)
                        .then()
                        .extract().response();

                // Validate the status code and response content
                switch (response.statusCode()) {
                    case 200:
                        validateSuccessResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        fail("Unhandled status code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            fail("Failed to read CSV file: " + e.getMessage());
        }
    }

    private void validateSuccessResponse(Response response) {
        response.then()
                .assertThat()
                .statusCode(200)
                .body("data.id", notNullValue())
                .body("data.type", equalTo("flavor"));
    }

    private void validateErrorResponse(Response response) {
        response.then()
                .assertThat()
                .statusCode(400)
                .body("error", notNullValue())
                .body("error.message", containsString("Bad Request"));
    }

    private void validateNotFoundResponse(Response response) {
        response.then()
                .assertThat()
                .statusCode(404)
                .body("error", notNullValue())
                .body("error.message", containsString("Not Found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        response.then()
                .assertThat()
                .statusCode(422)
                .body("error", notNullValue())
                .body("error.message", containsString("Unprocessable Entity"));
    }
}
