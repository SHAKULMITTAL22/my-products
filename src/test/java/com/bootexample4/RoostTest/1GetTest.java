// Test generated by RoostGPT for test rest-assured-shakul using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /v2.1/flavors/1_get for http method type GET in rest-assured framework

// RoostTestHash=59bac22772

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.BeforeClass;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GetTest {

    @BeforeClass
    public static void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void get_Test() {
        String csvFilePath = "src/test/java/com/bootexample4/RoostTest/1_get.csv";

        try (BufferedReader reader = new BufferedReader(new FileReader(csvFilePath))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                // Create a map of header to data
                Map<String, String> params = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    params.put(headers[i], data[i]);
                }

                Response response = given()
                        .queryParams(params)
                        .when()
                        .get("/v2.1/flavors/1")
                        .then()
                        .extract().response();

                // Validate response based on status code
                switch (response.statusCode()) {
                    case 200:
                        validateSuccessfulResponse(response);
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        throw new AssertionError("Unexpected status code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateSuccessfulResponse(Response response) {
        response.then()
                .assertThat()
                .statusCode(200)
                .contentType(ContentType.JSON)
                .body("id", equalTo(1))
                .body("name", notNullValue())
                .body("description", notNullValue());
    }

    private void validateErrorResponse(Response response) {
        response.then()
                .assertThat()
                .statusCode(400)
                .contentType(ContentType.JSON)
                .body("error", notNullValue());
    }

    private void validateNotFoundResponse(Response response) {
        response.then()
                .assertThat()
                .statusCode(404)
                .contentType(ContentType.JSON)
                .body("message", equalTo("Not Found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        response.then()
                .assertThat()
                .statusCode(422)
                .contentType(ContentType.JSON)
                .body("error", containsString("Unprocessable Entity"));
    }
}
