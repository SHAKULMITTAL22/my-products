// Test generated by RoostGPT for test rest-assured-metric using AI Type Open AI and AI Model gpt-4


// Test generated for /v2.0/metering/metering-label-rules_post for http method type POST in rest-assured framework


// RoostTestHash=067b623f58


package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.assertEquals;

public class MeteringLabelRulesPostTest {

    @Test
    public void meteringLabelRulesPostTest() {
        RestAssured.baseURI = System.getenv("BASE_URL");

        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/bootexample4/RoostTest/metering-label-rules_post.csv"))) {

            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                        .contentType(ContentType.JSON)
                        .body(map)
                        .when()
                        .post("/v2.0/metering/metering-label-rules")
                        .then()
                        .assertThat()
                        .statusCode(201)
                        .extract().response();

                assertEquals("Description: 201 response", response.getStatusCode(), 201);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
