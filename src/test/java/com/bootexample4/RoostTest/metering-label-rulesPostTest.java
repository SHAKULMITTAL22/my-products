// Test generated by RoostGPT for test rest-assured-metric using AI Type Open AI and AI Model gpt-4

// Test generated for /v2.0/metering/metering-label-rules_post for http method type POST in rest-assured framework

// RoostTestHash=067b623f58

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.BeforeClass;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class metering-label-rulesPostTest {

    @BeforeClass
    public static void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void meteringLabelRulesPostTest() {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/test/java/com/bootexample4/RoostTest/metering-label-rules_post.csv"))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                Map<String, String> map = new HashMap<>();
                for (int i = 0; i < headers.length; i++) {
                    map.put(headers[i], data[i]);
                }

                Response response = given()
                        .header("Content-Type", "application/json")
                        .body(map)
                        .when()
                        .post("/v2.0/metering/metering-label-rules")
                        .then()
                        .extract().response();

                switch (response.statusCode()){
                    case 201:
                        System.out.println("Description: 201 response");
                        break;
                    case 400:
                        validateErrorResponse(response);
                        break;
                    case 404:
                        validateNotFoundResponse(response);
                        break;
                    case 422:
                        validateUnprocessableEntityResponse(response);
                        break;
                    default:
                        System.out.println("Received unexpected HTTP status code: " + response.statusCode());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void validateErrorResponse(Response response) {
        assertThat(response.path("error"), is(notNullValue()));
        assertThat(response.path("message"), is(notNullValue()));
    }

    private void validateNotFoundResponse(Response response) {
        assertThat(response.path("error"), equalTo("Not Found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        assertThat(response.path("error"), equalTo("Unprocessable Entity"));
        assertThat(response.path("details"), is(notNullValue()));
    }
}
