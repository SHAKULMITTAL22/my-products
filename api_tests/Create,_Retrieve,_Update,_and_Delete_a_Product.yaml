# Test generated by RoostGPT for test intergration-test-artillery-gherkin-demo using AI Type Open AI and AI Model gpt-4


config:
  target: "{{ $processEnvironment.API_HOST }}/api"
  phases:
    - duration: 60
      arrivalRate: 20
  plugins:
    expect: {}
  payload:
    path: "Create,_Retrieve,_Update,_and_Delete_a_Product.csv"
    fields:
      - "name"
      - "description"
      - "price"
      - "nonExistingProductId"
    skipHeader: true
  processor: "./processor.js"

scenarios:
  - name: "Create, Retrieve, Update, and Delete a Product"
    flow:
      - post:
          url: "/products"
          json:
            name: "{{ name }}"
            description: "{{ description }}"
            price: "{{ price }}"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
            - hasProperty: "id"
            - hasProperty: "name"
            - hasProperty: "description"
            - hasProperty: "price"
        capture:
          json: "$.id"
          as: "productId"
      - think: 1
      - get:
          url: "/products/{{ productId }}"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
            - hasProperty: "id"
            - hasProperty: "name"
            - hasProperty: "description"
            - hasProperty: "price"
      - think: 1
      - put:
          url: "/products/{{ productId }}"
          json:
            name: "updated orange"
            description: "An updated juicy orange"
            price: 35
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
            - hasProperty: "id"
            - hasProperty: "name"
            - hasProperty: "description"
            - hasProperty: "price"
      - think: 1
      - delete:
          url: "/products/{{ productId }}"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
      - think: 1
      - get:
          url: "/products/{{ productId }}"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 404
      - think: 1
      - post:
          url: "/products"
          json:
            name: ""
            description: "A juicy orange fruit"
            price: 30
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 405
      - think: 1
      - get:
          url: "/products/{{ nonExistingProductId }}"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 404
      - think: 1
      - put:
          url: "/products/{{ nonExistingProductId }}"
          json:
            name: "non-existing product"
            description: "A non-existing product description"
            price: 40
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 404
      - think: 1
      - delete:
          url: "/products/{{ nonExistingProductId }}"
          headers:
            Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 404
